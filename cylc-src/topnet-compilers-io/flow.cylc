#!jinja2

{% set toolchain_name = '4.4.4-intel-2017a', '4.6.0-iimpi-2022a', '4.6.1-gompi-2023a' %}
{% set fc = 'ifort', 'ifort', 'gfortran' %}
{% set topnet_src = '/nesi/nobackup/pletzera/topnet-code/topnet-merge_TOP-83_Evap_with_ETI_Snow-GW_ap_io/' %}
{% set build_dir = '/nesi/nobackup/pletzera/topnet_runs/merge_TOP-83_Evap_with_ETI_Snow-GW_ap_io' %}
{% set input_dir = '/nesi/nobackup/pletzera/topnet_2024/runs/zammit/latest-intel-milan/' %}
{% set N = toolchain_name | length %}

[scheduling]
  [[graph]]
    R1 = """
{% for I in range(N) %}
     build_{{ I }} => run_{{ I }} 
{% endfor %}
# reference run
{% for I in range(1, N) %}
     run_0 & run_{{ I }} => check_{{ I }}
{% endfor %}
  """

[runtime]

{% for I in range(N) %}

  [[build_{{ I }}]]
    script = """
      cd {{ build_dir }}
      bdir={{ toolchain_name[I] }}
      rm -rf $bdir
      mkdir -p $bdir
      cd $bdir
      module purge
      module load netCDF-Fortran/{{ toolchain_name[I] }}
      module load CMake
      FC={{ fc[I] }} cmake {{ topnet_src }}
      make clean
      make
    """
 
  [[run_{{ I }}]]
    platform = mahuika-slurm
    script = """
cd {{ build_dir }}/{{ toolchain_name[I] }}
rm -rf run
mkdir run
cd run
cp {{ input_dir }}/io_paths.nml .
cp {{ input_dir }}/test.nml .
mkdir output restart
module purge
module load netCDF-Fortran/{{ toolchain_name[I] }}

{{ build_dir }}/{{ toolchain_name[I] }}/source/topnet test.nml >& topnet-out.txt
    """
    [[[directives]]]
      --time = 00:20:00
      --mem = 5g

  [[check_{{ I }}]]
    script = """
cd {{ build_dir }}/{{ toolchain_name[I] }}/run
module purge
module load Python

python {{ topnet_src }}/scripts/plot_tseries.py -n output/tseries*.nc -v mod_streamq -o mod_streamq.png >& plot_tseries-out.txt
cat plot_tseries-out.txt

# get the checksum
checksum=$(cat plot_tseries-out.txt | perl -ne 'if(/checksum\:\s*([^\s]*)/){print $1;}')

# use the first run as reference
python {{ topnet_src }}/scripts/plot_tseries.py -n {{ build_dir }}/{{ toolchain_name[0] }}/run/output/tseries*.nc -v mod_streamq -o mod_streamq.png >& plot_tseries-out-ref.txt
cat plot_tseries-out-ref.txt

# get the reference checksum
ref_checksum="$(cat plot_tseries-out-ref.txt | perl -ne 'if(/checksum\:\s*([^\s]*)/){print $1;}')"

cat > compare_checksums.py << EOF
import sys

checksum = ${checksum}
ref_checksum = ${ref_checksum}
diff = checksum - ref_checksum
real_tol = 0.01
print(f'diff = {diff}')
if abs(diff) > rel_tol * abs(${ref_checksum}):
    print(f'{abs(diff)} > {tol} * {abs(ref_checksum)} = {tol * abs(ref_checksum)}')
    print('FAILURE')
    sys.exit(1)
else:
    print('SUCCESS')
    sys.exit(0)
EOF

# compare checksums
python compare_checksums.py
    """
{% endfor %}
